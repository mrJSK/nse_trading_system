# Generated by Django 5.2.4 on 2025-07-26 11:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Watchlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('auto_update', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=50)),
                ('filter_criteria', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'watchlists',
            },
        ),
        migrations.CreateModel(
            name='IndustryClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('level', models.PositiveIntegerField(default=0)),
                ('sector_weight', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='market_data_service.industryclassification')),
            ],
            options={
                'db_table': 'industry_classifications',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('symbol', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('about', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('bse_code', models.CharField(blank=True, max_length=20, null=True)),
                ('nse_code', models.CharField(blank=True, max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_tradeable', models.BooleanField(default=True)),
                ('fyers_symbol', models.CharField(blank=True, max_length=50, null=True)),
                ('last_signal_generated', models.DateTimeField(blank=True, null=True)),
                ('signal_frequency', models.CharField(choices=[('high', 'High Frequency'), ('medium', 'Medium Frequency'), ('low', 'Low Frequency')], default='medium', max_length=20)),
                ('successful_trades', models.IntegerField(default=0)),
                ('total_trades', models.IntegerField(default=0)),
                ('average_return', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('win_rate', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('last_scraped', models.DateTimeField(blank=True, null=True)),
                ('scraping_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('event_driven', 'Event Driven')], default='event_driven', max_length=20)),
                ('scraping_priority', models.IntegerField(default=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('industry_classification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='market_data_service.industryclassification')),
            ],
            options={
                'db_table': 'companies',
            },
        ),
        migrations.CreateModel(
            name='MarketDataCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=20)),
                ('data_type', models.CharField(choices=[('HISTORICAL', 'Historical OHLCV'), ('LIVE', 'Live Quote'), ('TECHNICAL', 'Technical Indicators'), ('VOLUME', 'Volume Analysis')], max_length=20)),
                ('timeframe', models.CharField(default='D', max_length=10)),
                ('data', models.JSONField(default=dict)),
                ('data_quality', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
                ('cache_key', models.CharField(max_length=100, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('hit_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'market_data_cache',
                'indexes': [models.Index(fields=['symbol', 'data_type'], name='market_data_symbol_fb4505_idx'), models.Index(fields=['cache_key'], name='market_data_cache_k_b72583_idx'), models.Index(fields=['expires_at'], name='market_data_expires_3074d5_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProfitabilityMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roce', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('roe', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('roa', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('roic', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('net_profit_margin', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('operating_margin', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('gross_margin', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('ebitda_margin', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('asset_turnover', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('inventory_turnover', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('receivables_turnover', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('data_source', models.CharField(default='screener', max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profitability_metrics', to='market_data_service.company')),
            ],
            options={
                'db_table': 'profitability_metrics',
            },
        ),
        migrations.CreateModel(
            name='QualitativeAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pros', models.JSONField(default=list)),
                ('cons', models.JSONField(default=list)),
                ('management_quality_score', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('business_model_score', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('competitive_advantage_score', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('esg_score', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('governance_score', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('sustainability_score', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('data_source', models.CharField(default='screener', max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='qualitative_analysis', to='market_data_service.company')),
            ],
            options={
                'db_table': 'qualitative_analysis',
            },
        ),
        migrations.CreateModel(
            name='ShareholdingPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern_type', models.CharField(default='quarterly', max_length=20)),
                ('period', models.CharField(max_length=20)),
                ('promoter_holding', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('public_holding', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('institutional_holding', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('fii_holding', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('dii_holding', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('mutual_fund_holding', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('retail_holding', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('raw_data', models.JSONField(default=dict)),
                ('data_source', models.CharField(default='screener', max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
            ],
            options={
                'db_table': 'shareholding_patterns',
            },
        ),
        migrations.CreateModel(
            name='SystemPerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('SCRAPING_PERFORMANCE', 'Scraping Performance'), ('SIGNAL_ACCURACY', 'Signal Accuracy'), ('API_PERFORMANCE', 'API Performance'), ('SYSTEM_HEALTH', 'System Health'), ('TRADING_PERFORMANCE', 'Trading Performance')], max_length=30)),
                ('metric_name', models.CharField(max_length=50)),
                ('metric_value', models.DecimalField(decimal_places=4, max_digits=10)),
                ('metric_unit', models.CharField(blank=True, max_length=20, null=True)),
                ('context_data', models.JSONField(default=dict)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'system_performance_metrics',
                'indexes': [models.Index(fields=['metric_type', 'metric_name'], name='system_perf_metric__af9a36_idx'), models.Index(fields=['period_start', 'period_end'], name='system_perf_period__a2127e_idx'), models.Index(fields=['created_at'], name='system_perf_created_adef32_idx')],
            },
        ),
        migrations.CreateModel(
            name='TradingSignal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_type', models.CharField(choices=[('efi_crossover', 'EFI Crossover'), ('fundamental', 'Fundamental Analysis'), ('event_driven', 'Event Driven'), ('composite', 'Composite Signal'), ('momentum', 'Momentum Signal'), ('breakout', 'Technical Breakout'), ('reversal', 'Trend Reversal')], max_length=20)),
                ('action', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold'), ('STRONG_BUY', 'Strong Buy'), ('STRONG_SELL', 'Strong Sell'), ('AVOID', 'Avoid')], max_length=15)),
                ('confidence', models.DecimalField(decimal_places=2, max_digits=3)),
                ('signal_strength', models.DecimalField(decimal_places=2, default=0.5, max_digits=3)),
                ('urgency', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], default='MEDIUM', max_length=10)),
                ('price_at_signal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('target_price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('stop_loss', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('risk_level', models.CharField(choices=[('LOW', 'Low Risk'), ('MEDIUM', 'Medium Risk'), ('HIGH', 'High Risk'), ('VERY_HIGH', 'Very High Risk')], default='MEDIUM', max_length=10)),
                ('position_size_pct', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('max_loss_pct', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('data_sources', models.JSONField(default=list)),
                ('signal_reasons', models.JSONField(default=list)),
                ('component_signals', models.JSONField(default=dict)),
                ('market_condition', models.CharField(blank=True, choices=[('BULLISH', 'Bullish'), ('BEARISH', 'Bearish'), ('SIDEWAYS', 'Sideways'), ('VOLATILE', 'Volatile')], max_length=15, null=True)),
                ('sector_sentiment', models.CharField(blank=True, max_length=15, null=True)),
                ('is_executed', models.BooleanField(default=False)),
                ('execution_price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('execution_date', models.DateTimeField(blank=True, null=True)),
                ('execution_notes', models.TextField(blank=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('close_price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('close_date', models.DateTimeField(blank=True, null=True)),
                ('close_reason', models.CharField(blank=True, choices=[('TARGET_HIT', 'Target Hit'), ('STOP_LOSS', 'Stop Loss'), ('TIME_DECAY', 'Time Decay'), ('SIGNAL_CHANGE', 'Signal Change'), ('MANUAL', 'Manual Close')], max_length=20, null=True)),
                ('profit_loss', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('profit_loss_pct', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('holding_period_days', models.IntegerField(null=True)),
                ('signal_accuracy', models.DecimalField(decimal_places=2, max_digits=3, null=True)),
                ('validation_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
            ],
            options={
                'db_table': 'trading_signals',
            },
        ),
        migrations.CreateModel(
            name='ValuationMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_cap', models.DecimalField(decimal_places=2, max_digits=15, null=True)),
                ('current_price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('high_52_week', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('low_52_week', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('stock_pe', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('book_value', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('price_to_book', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('dividend_yield', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('face_value', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('ev_ebitda', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('price_to_sales', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('price_to_earnings_growth', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('beta', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('volatility_30d', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('relative_strength', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('data_source', models.CharField(default='screener', max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='valuation_metrics', to='market_data_service.company')),
            ],
            options={
                'db_table': 'valuation_metrics',
            },
        ),
        migrations.CreateModel(
            name='WatchlistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('notes', models.TextField(blank=True)),
                ('auto_remove_criteria', models.JSONField(default=dict)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
                ('watchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.watchlist')),
            ],
            options={
                'db_table': 'watchlist_items',
            },
        ),
        migrations.CreateModel(
            name='CorporateEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('results_announcement', 'Results Announcement'), ('order_received', 'Order/Contract Received'), ('dividend', 'Dividend Declaration'), ('bonus', 'Bonus Issue'), ('rights', 'Rights Issue'), ('buyback', 'Share Buyback'), ('merger', 'Merger & Acquisition'), ('delisting', 'Delisting'), ('agm', 'Annual General Meeting'), ('board_meeting', 'Board Meeting'), ('other', 'Other')], max_length=30)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField()),
                ('announcement_date', models.DateTimeField()),
                ('event_date', models.DateField(blank=True, null=True)),
                ('impact_level', models.CharField(choices=[('HIGH', 'High Impact'), ('MEDIUM', 'Medium Impact'), ('LOW', 'Low Impact')], default='LOW', max_length=10)),
                ('expected_price_impact', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('signal_generated', models.BooleanField(default=False)),
                ('signal_action', models.CharField(blank=True, choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold')], max_length=10, null=True)),
                ('price_before_event', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('price_after_event', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('actual_price_impact', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('event_outcome', models.CharField(choices=[('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('outcome_confidence', models.DecimalField(decimal_places=2, max_digits=3, null=True)),
                ('event_data', models.JSONField(default=dict)),
                ('data_source', models.CharField(max_length=20)),
                ('source_url', models.URLField(blank=True, null=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('processing_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
            ],
            options={
                'db_table': 'corporate_events',
                'indexes': [models.Index(fields=['company', 'event_type'], name='corporate_e_company_07a2af_idx'), models.Index(fields=['announcement_date'], name='corporate_e_announc_71dd26_idx'), models.Index(fields=['event_date'], name='corporate_e_event_d_d915d4_idx'), models.Index(fields=['impact_level'], name='corporate_e_impact__ee022e_idx'), models.Index(fields=['is_processed'], name='corporate_e_is_proc_58f6d4_idx'), models.Index(fields=['signal_generated'], name='corporate_e_signal__c773fc_idx'), models.Index(fields=['event_outcome'], name='corporate_e_event_o_b36c54_idx')],
            },
        ),
        migrations.CreateModel(
            name='FinancialStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statement_type', models.CharField(choices=[('quarterly_results', 'Quarterly Results'), ('annual_xbrl', 'Annual Results (XBRL)'), ('profit_loss', 'Profit & Loss'), ('balance_sheet', 'Balance Sheet'), ('cash_flow', 'Cash Flow'), ('ratios', 'Financial Ratios')], max_length=20)),
                ('data_source', models.CharField(choices=[('xbrl', 'XBRL File'), ('nse_scrape', 'NSE Website'), ('screener', 'Screener.in'), ('rss', 'RSS Feed'), ('manual', 'Manual Entry')], max_length=20)),
                ('period', models.CharField(blank=True, max_length=20, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('quarter', models.CharField(blank=True, max_length=10, null=True)),
                ('raw_data', models.JSONField(default=dict)),
                ('processed_metrics', models.JSONField(default=dict)),
                ('validation_errors', models.JSONField(default=list)),
                ('data_quality_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('is_validated', models.BooleanField(default=False)),
                ('filing_date', models.DateTimeField(blank=True, null=True)),
                ('announcement_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
            ],
            options={
                'db_table': 'financial_statements',
                'indexes': [models.Index(fields=['company', 'statement_type'], name='financial_s_company_70b964_idx'), models.Index(fields=['announcement_date'], name='financial_s_announc_8aeb74_idx'), models.Index(fields=['filing_date'], name='financial_s_filing__f6ad2c_idx'), models.Index(fields=['data_quality_score'], name='financial_s_data_qu_48e53f_idx'), models.Index(fields=['is_validated'], name='financial_s_is_vali_58929d_idx')],
                'unique_together': {('company', 'statement_type', 'data_source', 'period')},
            },
        ),
        migrations.CreateModel(
            name='FundamentalScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valuation_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('profitability_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('growth_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('financial_health_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('qualitative_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('momentum_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('quality_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('dividend_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('overall_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('score_trend_30d', models.CharField(choices=[('UP', 'Improving'), ('DOWN', 'Declining'), ('STABLE', 'Stable')], default='STABLE', max_length=10)),
                ('previous_score', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('score_change', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('calculation_date', models.DateTimeField(auto_now=True)),
                ('data_freshness_days', models.IntegerField(default=0)),
                ('confidence_level', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('score_breakdown', models.JSONField(default=dict)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fundamental_score', to='market_data_service.company')),
            ],
            options={
                'db_table': 'fundamental_scores',
                'indexes': [models.Index(fields=['overall_score'], name='fundamental_overall_0a47f9_idx'), models.Index(fields=['calculation_date'], name='fundamental_calcula_cab5a9_idx'), models.Index(fields=['score_trend_30d'], name='fundamental_score_t_fa4570_idx'), models.Index(fields=['confidence_level'], name='fundamental_confide_dbcd8b_idx')],
            },
        ),
        migrations.CreateModel(
            name='GrowthMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sales_growth_10y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('sales_growth_5y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('sales_growth_3y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('sales_growth_1y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('sales_growth_ttm', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('profit_growth_10y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('profit_growth_5y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('profit_growth_3y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('profit_growth_1y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('profit_growth_ttm', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('stock_cagr_10y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('stock_cagr_5y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('stock_cagr_3y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('stock_cagr_1y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('book_value_growth_5y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('dividend_growth_5y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('eps_growth_5y', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('quarterly_revenue_growth', models.JSONField(default=dict)),
                ('quarterly_profit_growth', models.JSONField(default=dict)),
                ('revenue_growth_consistency', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('profit_growth_consistency', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('data_source', models.CharField(default='screener', max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='growth_metrics', to='market_data_service.company')),
            ],
            options={
                'db_table': 'growth_metrics',
                'indexes': [models.Index(fields=['sales_growth_1y'], name='growth_metr_sales_g_876a36_idx'), models.Index(fields=['profit_growth_1y'], name='growth_metr_profit__20e70d_idx'), models.Index(fields=['revenue_growth_consistency'], name='growth_metr_revenue_2a72ac_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='industryclassification',
            index=models.Index(fields=['name'], name='industry_cl_name_5618d2_idx'),
        ),
        migrations.AddIndex(
            model_name='industryclassification',
            index=models.Index(fields=['level'], name='industry_cl_level_dd83ed_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['symbol'], name='companies_symbol_66c09b_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['is_active'], name='companies_is_acti_e9a12b_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['is_tradeable'], name='companies_is_trad_2b2462_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['last_scraped'], name='companies_last_sc_38d166_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['scraping_priority'], name='companies_scrapin_780e4e_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['signal_frequency'], name='companies_signal__502158_idx'),
        ),
        migrations.AddIndex(
            model_name='profitabilitymetrics',
            index=models.Index(fields=['roe'], name='profitabili_roe_962bed_idx'),
        ),
        migrations.AddIndex(
            model_name='profitabilitymetrics',
            index=models.Index(fields=['roce'], name='profitabili_roce_ce086c_idx'),
        ),
        migrations.AddIndex(
            model_name='profitabilitymetrics',
            index=models.Index(fields=['net_profit_margin'], name='profitabili_net_pro_d7ad0d_idx'),
        ),
        migrations.AddIndex(
            model_name='shareholdingpattern',
            index=models.Index(fields=['period'], name='shareholdin_period_543352_idx'),
        ),
        migrations.AddIndex(
            model_name='shareholdingpattern',
            index=models.Index(fields=['promoter_holding'], name='shareholdin_promote_ae65f1_idx'),
        ),
        migrations.AddIndex(
            model_name='shareholdingpattern',
            index=models.Index(fields=['institutional_holding'], name='shareholdin_institu_4465b7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='shareholdingpattern',
            unique_together={('company', 'pattern_type', 'period')},
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['company', 'created_at'], name='trading_sig_company_b3b877_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['action', 'confidence'], name='trading_sig_action_f06f36_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['is_executed', 'is_closed'], name='trading_sig_is_exec_74db5b_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['signal_type', 'action'], name='trading_sig_signal__26b661_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['risk_level'], name='trading_sig_risk_le_d21cc6_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['urgency'], name='trading_sig_urgency_d5c4a9_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['profit_loss_pct'], name='trading_sig_profit__de06e9_idx'),
        ),
        migrations.AddIndex(
            model_name='valuationmetrics',
            index=models.Index(fields=['market_cap'], name='valuation_m_market__cab13a_idx'),
        ),
        migrations.AddIndex(
            model_name='valuationmetrics',
            index=models.Index(fields=['stock_pe'], name='valuation_m_stock_p_873f5b_idx'),
        ),
        migrations.AddIndex(
            model_name='valuationmetrics',
            index=models.Index(fields=['updated_at'], name='valuation_m_updated_a7b74f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='watchlistitem',
            unique_together={('watchlist', 'company')},
        ),
    ]
