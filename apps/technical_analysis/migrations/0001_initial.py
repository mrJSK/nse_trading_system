# Generated by Django 5.2.4 on 2025-07-26 11:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('market_data_service', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TechnicalIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indicator_type', models.CharField(choices=[('EFI', 'Ease of Flow Index'), ('RSI', 'Relative Strength Index'), ('MACD', 'MACD'), ('SMA', 'Simple Moving Average'), ('EMA', 'Exponential Moving Average'), ('BOLLINGER', 'Bollinger Bands'), ('VOLUME', 'Volume Analysis'), ('ATR', 'Average True Range'), ('STOCHASTIC', 'Stochastic Oscillator'), ('WILLIAMS_R', 'Williams %R'), ('CCI', 'Commodity Channel Index'), ('ROC', 'Rate of Change'), ('MOMENTUM', 'Momentum'), ('OBV', 'On-Balance Volume')], max_length=20)),
                ('timeframe', models.CharField(choices=[('1M', '1 Minute'), ('5M', '5 Minutes'), ('15M', '15 Minutes'), ('30M', '30 Minutes'), ('1H', '1 Hour'), ('4H', '4 Hours'), ('D', 'Daily'), ('W', 'Weekly'), ('M', 'Monthly')], default='D', max_length=10)),
                ('indicator_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('parameters', models.JSONField(default=dict)),
                ('current_value', models.DecimalField(decimal_places=6, max_digits=15, null=True)),
                ('previous_value', models.DecimalField(decimal_places=6, max_digits=15, null=True)),
                ('secondary_value', models.DecimalField(decimal_places=6, max_digits=15, null=True)),
                ('tertiary_value', models.DecimalField(decimal_places=6, max_digits=15, null=True)),
                ('signal', models.CharField(choices=[('BUY', 'Buy Signal'), ('SELL', 'Sell Signal'), ('STRONG_BUY', 'Strong Buy'), ('STRONG_SELL', 'Strong Sell'), ('NEUTRAL', 'Neutral'), ('HOLD', 'Hold')], default='NEUTRAL', max_length=15)),
                ('signal_strength', models.DecimalField(decimal_places=3, default=0.5, max_digits=5)),
                ('confidence', models.DecimalField(decimal_places=3, default=0.5, max_digits=5)),
                ('crossover_detected', models.BooleanField(default=False)),
                ('crossover_direction', models.CharField(blank=True, choices=[('UP', 'Upward'), ('DOWN', 'Downward')], max_length=10, null=True)),
                ('crossover_value', models.DecimalField(decimal_places=6, max_digits=15, null=True)),
                ('divergence_detected', models.BooleanField(default=False)),
                ('divergence_type', models.CharField(blank=True, choices=[('BULLISH', 'Bullish Divergence'), ('BEARISH', 'Bearish Divergence'), ('HIDDEN_BULLISH', 'Hidden Bullish'), ('HIDDEN_BEARISH', 'Hidden Bearish')], max_length=20, null=True)),
                ('historical_values', models.JSONField(default=list)),
                ('historical_signals', models.JSONField(default=list)),
                ('accuracy_score', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('signals_generated', models.IntegerField(default=0)),
                ('successful_signals', models.IntegerField(default=0)),
                ('market_condition', models.CharField(choices=[('TRENDING', 'Trending Market'), ('RANGING', 'Ranging Market'), ('VOLATILE', 'Volatile Market'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=15)),
                ('calculation_timestamp', models.DateTimeField()),
                ('data_points_used', models.IntegerField(default=0)),
                ('calculation_time_ms', models.IntegerField(null=True)),
                ('data_quality_score', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
                ('missing_data_pct', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
            ],
            options={
                'db_table': 'technical_indicators',
            },
        ),
        migrations.CreateModel(
            name='IndicatorAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('CROSSOVER', 'Crossover Alert'), ('THRESHOLD', 'Threshold Breach'), ('DIVERGENCE', 'Divergence Alert'), ('PATTERN', 'Pattern Alert'), ('VOLUME', 'Volume Alert')], max_length=15)),
                ('urgency', models.CharField(choices=[('LOW', 'Low Priority'), ('MEDIUM', 'Medium Priority'), ('HIGH', 'High Priority'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('trigger_value', models.DecimalField(decimal_places=6, max_digits=15, null=True)),
                ('threshold_value', models.DecimalField(decimal_places=6, max_digits=15, null=True)),
                ('alert_data', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('is_sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('was_accurate', models.BooleanField(null=True)),
                ('accuracy_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='technical_analysis.technicalindicator')),
            ],
            options={
                'db_table': 'indicator_alerts',
            },
        ),
        migrations.CreateModel(
            name='BacktestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strategy_type', models.CharField(choices=[('SINGLE_INDICATOR', 'Single Indicator'), ('MULTI_INDICATOR', 'Multiple Indicators'), ('EFI_STRATEGY', 'EFI Crossover Strategy'), ('MEAN_REVERSION', 'Mean Reversion'), ('MOMENTUM', 'Momentum Strategy'), ('CUSTOM', 'Custom Strategy')], max_length=20)),
                ('strategy_name', models.CharField(max_length=100)),
                ('timeframe', models.CharField(max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('initial_capital', models.DecimalField(decimal_places=2, default=100000, max_digits=15)),
                ('strategy_parameters', models.JSONField(default=dict)),
                ('indicators_used', models.JSONField(default=list)),
                ('total_trades', models.IntegerField(default=0)),
                ('winning_trades', models.IntegerField(default=0)),
                ('losing_trades', models.IntegerField(default=0)),
                ('win_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('total_return', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('total_return_pct', models.DecimalField(decimal_places=4, default=0, max_digits=8)),
                ('annualized_return', models.DecimalField(decimal_places=4, default=0, max_digits=8)),
                ('max_drawdown', models.DecimalField(decimal_places=4, default=0, max_digits=8)),
                ('volatility', models.DecimalField(decimal_places=4, default=0, max_digits=8)),
                ('sharpe_ratio', models.DecimalField(decimal_places=4, max_digits=6, null=True)),
                ('sortino_ratio', models.DecimalField(decimal_places=4, max_digits=6, null=True)),
                ('avg_trade_return', models.DecimalField(decimal_places=4, default=0, max_digits=8)),
                ('best_trade', models.DecimalField(decimal_places=4, default=0, max_digits=8)),
                ('worst_trade', models.DecimalField(decimal_places=4, default=0, max_digits=8)),
                ('trade_log', models.JSONField(default=list)),
                ('equity_curve', models.JSONField(default=list)),
                ('drawdown_curve', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
            ],
            options={
                'db_table': 'backtest_results',
                'indexes': [models.Index(fields=['company', 'strategy_type'], name='backtest_re_company_f43c1a_idx'), models.Index(fields=['start_date', 'end_date'], name='backtest_re_start_d_44783e_idx'), models.Index(fields=['total_return_pct'], name='backtest_re_total_r_3c1bf2_idx'), models.Index(fields=['sharpe_ratio'], name='backtest_re_sharpe__698ef8_idx'), models.Index(fields=['win_rate'], name='backtest_re_win_rat_2a95c8_idx')],
            },
        ),
        migrations.CreateModel(
            name='MarketData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeframe', models.CharField(choices=[('1M', '1 Minute'), ('5M', '5 Minutes'), ('15M', '15 Minutes'), ('30M', '30 Minutes'), ('1H', '1 Hour'), ('4H', '4 Hours'), ('D', 'Daily'), ('W', 'Weekly'), ('M', 'Monthly')], max_length=10)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('open_price', models.DecimalField(decimal_places=4, max_digits=12)),
                ('high_price', models.DecimalField(decimal_places=4, max_digits=12)),
                ('low_price', models.DecimalField(decimal_places=4, max_digits=12)),
                ('close_price', models.DecimalField(decimal_places=4, max_digits=12)),
                ('volume', models.BigIntegerField()),
                ('vwap', models.DecimalField(decimal_places=4, max_digits=12, null=True)),
                ('open_interest', models.BigIntegerField(null=True)),
                ('price_change', models.DecimalField(decimal_places=4, max_digits=12, null=True)),
                ('price_change_pct', models.DecimalField(decimal_places=4, max_digits=8, null=True)),
                ('volume_sma', models.BigIntegerField(null=True)),
                ('volume_ratio', models.DecimalField(decimal_places=4, max_digits=8, null=True)),
                ('true_range', models.DecimalField(decimal_places=4, max_digits=12, null=True)),
                ('daily_volatility', models.DecimalField(decimal_places=4, max_digits=8, null=True)),
                ('gap_size', models.DecimalField(decimal_places=4, max_digits=8, null=True)),
                ('gap_type', models.CharField(choices=[('NO_GAP', 'No Gap'), ('GAP_UP', 'Gap Up'), ('GAP_DOWN', 'Gap Down'), ('ISLAND_TOP', 'Island Top'), ('ISLAND_BOTTOM', 'Island Bottom')], default='NO_GAP', max_length=15)),
                ('bid_price', models.DecimalField(decimal_places=4, max_digits=12, null=True)),
                ('ask_price', models.DecimalField(decimal_places=4, max_digits=12, null=True)),
                ('bid_size', models.BigIntegerField(null=True)),
                ('ask_size', models.BigIntegerField(null=True)),
                ('spread', models.DecimalField(decimal_places=4, max_digits=8, null=True)),
                ('data_source', models.CharField(choices=[('FYERS', 'Fyers API'), ('NSE', 'NSE Direct'), ('YAHOO', 'Yahoo Finance'), ('MANUAL', 'Manual Entry')], default='FYERS', max_length=20)),
                ('is_validated', models.BooleanField(default=True)),
                ('data_quality_score', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
                ('is_pre_market', models.BooleanField(default=False)),
                ('is_post_market', models.BooleanField(default=False)),
                ('session_type', models.CharField(choices=[('REGULAR', 'Regular Session'), ('PRE_MARKET', 'Pre-Market'), ('POST_MARKET', 'Post-Market'), ('EXTENDED', 'Extended Hours')], default='REGULAR', max_length=15)),
                ('is_ex_dividend', models.BooleanField(default=False)),
                ('is_split_adjusted', models.BooleanField(default=False)),
                ('is_bonus_adjusted', models.BooleanField(default=False)),
                ('adjustment_factor', models.DecimalField(decimal_places=6, default=1.0, max_digits=8)),
                ('is_doji', models.BooleanField(default=False)),
                ('is_hammer', models.BooleanField(default=False)),
                ('is_shooting_star', models.BooleanField(default=False)),
                ('candlestick_pattern', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
            ],
            options={
                'db_table': 'market_data',
                'indexes': [models.Index(fields=['company', 'timeframe', 'timestamp'], name='market_data_company_691956_idx'), models.Index(fields=['timestamp', 'timeframe'], name='market_data_timesta_a6d12d_idx'), models.Index(fields=['volume', 'timestamp'], name='market_data_volume_de633f_idx'), models.Index(fields=['close_price', 'timestamp'], name='market_data_close_p_6a125f_idx'), models.Index(fields=['data_source', 'is_validated'], name='market_data_data_so_191b1d_idx'), models.Index(fields=['session_type'], name='market_data_session_9d1696_idx'), models.Index(fields=['gap_type'], name='market_data_gap_typ_f0019b_idx'), models.Index(fields=['candlestick_pattern'], name='market_data_candles_466ed0_idx')],
                'unique_together': {('company', 'timeframe', 'timestamp')},
            },
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['company', 'indicator_type'], name='technical_i_company_9084a7_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['signal', 'crossover_detected'], name='technical_i_signal_eb8dd5_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['calculation_timestamp'], name='technical_i_calcula_1d1f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['timeframe', 'is_active'], name='technical_i_timefra_5a7bd9_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['signal_strength', 'confidence'], name='technical_i_signal__41b2ff_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['divergence_detected', 'divergence_type'], name='technical_i_diverge_b9967d_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['market_condition'], name='technical_i_market__3fecbd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='technicalindicator',
            unique_together={('company', 'indicator_type', 'timeframe')},
        ),
        migrations.AddIndex(
            model_name='indicatoralert',
            index=models.Index(fields=['company', 'alert_type'], name='indicator_a_company_53c5f5_idx'),
        ),
        migrations.AddIndex(
            model_name='indicatoralert',
            index=models.Index(fields=['urgency', 'is_active'], name='indicator_a_urgency_e27971_idx'),
        ),
        migrations.AddIndex(
            model_name='indicatoralert',
            index=models.Index(fields=['created_at'], name='indicator_a_created_b9236a_idx'),
        ),
        migrations.AddIndex(
            model_name='indicatoralert',
            index=models.Index(fields=['is_sent'], name='indicator_a_is_sent_24e330_idx'),
        ),
    ]
