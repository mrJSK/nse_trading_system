# Generated by Django 5.2.4 on 2025-07-26 11:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('market_data_service', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('source_type', models.CharField(choices=[('NSE_RSS', 'NSE RSS Feed'), ('NSE_CALENDAR', 'NSE Event Calendar'), ('COMPANY_WEBSITE', 'Company Website'), ('NEWS_API', 'News API'), ('SCREENER_RSS', 'Screener RSS Feed'), ('FYERS_API', 'Fyers API Events'), ('MANUAL', 'Manual Entry')], max_length=20)),
                ('url', models.URLField(blank=True, null=True)),
                ('polling_interval_minutes', models.IntegerField(default=30)),
                ('is_active', models.BooleanField(default=True)),
                ('last_check', models.DateTimeField(blank=True, null=True)),
                ('retry_attempts', models.IntegerField(default=3)),
                ('timeout_seconds', models.IntegerField(default=30)),
                ('rate_limit_requests_per_minute', models.IntegerField(default=60)),
                ('requires_auth', models.BooleanField(default=False)),
                ('auth_token', models.CharField(blank=True, max_length=500)),
                ('custom_headers', models.JSONField(default=dict)),
                ('success_rate', models.DecimalField(decimal_places=2, default=100.0, max_digits=5)),
                ('average_response_time_ms', models.IntegerField(null=True)),
                ('total_events_collected', models.IntegerField(default=0)),
                ('last_error_message', models.TextField(blank=True)),
                ('consecutive_failures', models.IntegerField(default=0)),
                ('is_healthy', models.BooleanField(default=True)),
                ('last_successful_check', models.DateTimeField(blank=True, null=True)),
                ('downtime_minutes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'event_sources',
                'indexes': [models.Index(fields=['source_type', 'is_active'], name='event_sourc_source__800a7e_idx'), models.Index(fields=['is_healthy'], name='event_sourc_is_heal_a7b49a_idx'), models.Index(fields=['last_check'], name='event_sourc_last_ch_0c53cb_idx')],
            },
        ),
        migrations.CreateModel(
            name='EventCalendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateField()),
                ('event_type', models.CharField(max_length=50)),
                ('event_category', models.CharField(choices=[('RESULTS', 'Financial Results'), ('DIVIDEND', 'Dividend'), ('BONUS', 'Bonus Issue'), ('RIGHTS', 'Rights Issue'), ('AGM', 'Annual General Meeting'), ('BOARD_MEETING', 'Board Meeting'), ('BUYBACK', 'Share Buyback'), ('SPLIT', 'Stock Split'), ('MERGER', 'Merger & Acquisition'), ('LISTING', 'New Listing'), ('DELISTING', 'Delisting'), ('OTHER', 'Other Events')], default='OTHER', max_length=20)),
                ('description', models.TextField()),
                ('calendar_category', models.CharField(choices=[('EQUITY', 'Equity'), ('SME', 'SME'), ('DEBT', 'Debt'), ('DERIVATIVES', 'Derivatives')], max_length=20)),
                ('event_time', models.TimeField(blank=True, null=True)),
                ('timezone', models.CharField(default='Asia/Kolkata', max_length=50)),
                ('is_market_hours', models.BooleanField(default=True)),
                ('expected_impact', models.CharField(choices=[('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low')], default='LOW', max_length=10)),
                ('impact_reason', models.CharField(blank=True, max_length=200)),
                ('affects_trading', models.BooleanField(default=True)),
                ('trading_action_required', models.CharField(choices=[('MONITOR', 'Monitor Only'), ('PREPARE_SIGNAL', 'Prepare Trading Signal'), ('IMMEDIATE_ACTION', 'Immediate Action Required'), ('NONE', 'No Action')], default='MONITOR', max_length=20)),
                ('is_processed', models.BooleanField(default=False)),
                ('has_generated_alert', models.BooleanField(default=False)),
                ('processing_notes', models.TextField(blank=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('notification_channels', models.JSONField(default=list)),
                ('reminder_set', models.BooleanField(default=False)),
                ('reminder_minutes_before', models.IntegerField(default=60)),
                ('event_occurred', models.BooleanField(default=False)),
                ('outcome_recorded', models.BooleanField(default=False)),
                ('outcome_notes', models.TextField(blank=True)),
                ('price_before_event', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('price_after_event', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('volume_before_event', models.BigIntegerField(null=True)),
                ('volume_after_event', models.BigIntegerField(null=True)),
                ('source_url', models.URLField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actual_event', models.ForeignKey(blank=True, help_text='Link to the actual corporate event when it occurs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='market_data_service.corporateevent')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event_monitoring.eventsource')),
            ],
            options={
                'db_table': 'event_calendar',
            },
        ),
        migrations.CreateModel(
            name='TradingAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, max_length=20)),
                ('alert_type', models.CharField(choices=[('EVENT_DRIVEN', 'Event Driven Alert'), ('HIGH_CONFIDENCE_SIGNAL', 'High Confidence Signal'), ('SYSTEM_ALERT', 'System Alert'), ('CALENDAR_REMINDER', 'Calendar Reminder'), ('PRICE_MOVEMENT', 'Significant Price Movement'), ('VOLUME_SPIKE', 'Volume Spike'), ('NEWS_IMPACT', 'News Impact Alert'), ('TECHNICAL_BREAKOUT', 'Technical Breakout'), ('FUNDAMENTAL_CHANGE', 'Fundamental Change')], max_length=30)),
                ('urgency', models.CharField(choices=[('LOW', 'Low Priority'), ('MEDIUM', 'Medium Priority'), ('HIGH', 'High Priority'), ('CRITICAL', 'Critical - Immediate Action')], default='MEDIUM', max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('detailed_analysis', models.TextField(blank=True)),
                ('alert_data', models.JSONField(default=dict)),
                ('context_data', models.JSONField(default=dict)),
                ('recommended_actions', models.JSONField(default=list)),
                ('market_price_at_alert', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('market_volume_at_alert', models.BigIntegerField(null=True)),
                ('market_condition', models.CharField(blank=True, choices=[('BULLISH', 'Bullish'), ('BEARISH', 'Bearish'), ('SIDEWAYS', 'Sideways'), ('VOLATILE', 'Volatile')], max_length=15, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SENT', 'Sent'), ('ACKNOWLEDGED', 'Acknowledged'), ('DISMISSED', 'Dismissed'), ('ACTED_UPON', 'Acted Upon')], default='PENDING', max_length=15)),
                ('is_processed', models.BooleanField(default=False)),
                ('delivery_channels', models.JSONField(default=list)),
                ('delivery_status', models.JSONField(default=dict)),
                ('delivery_attempts', models.IntegerField(default=0)),
                ('last_delivery_attempt', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.CharField(blank=True, max_length=100)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('action_taken', models.TextField(blank=True)),
                ('outcome_notes', models.TextField(blank=True)),
                ('was_accurate', models.BooleanField(null=True)),
                ('accuracy_notes', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('calendar_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='event_monitoring.eventcalendar')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
                ('related_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='market_data_service.corporateevent')),
                ('related_signal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='market_data_service.tradingsignal')),
            ],
            options={
                'db_table': 'trading_alerts',
            },
        ),
        migrations.CreateModel(
            name='EventProcessingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processing_type', models.CharField(choices=[('CALENDAR_SYNC', 'Calendar Synchronization'), ('RSS_FETCH', 'RSS Feed Fetch'), ('EVENT_ANALYSIS', 'Event Analysis'), ('ALERT_GENERATION', 'Alert Generation'), ('SIGNAL_GENERATION', 'Signal Generation'), ('NOTIFICATION_DISPATCH', 'Notification Dispatch')], max_length=30)),
                ('log_level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Information'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], default='INFO', max_length=10)),
                ('message', models.TextField()),
                ('details', models.JSONField(default=dict)),
                ('processing_time_ms', models.IntegerField(null=True)),
                ('items_processed', models.IntegerField(default=0)),
                ('success_count', models.IntegerField(default=0)),
                ('error_count', models.IntegerField(default=0)),
                ('exception_type', models.CharField(blank=True, max_length=100)),
                ('exception_message', models.TextField(blank=True)),
                ('stack_trace', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='market_data_service.company')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='event_monitoring.eventsource')),
                ('related_alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='event_monitoring.tradingalert')),
            ],
            options={
                'db_table': 'event_processing_logs',
            },
        ),
        migrations.AddIndex(
            model_name='eventcalendar',
            index=models.Index(fields=['event_date', 'calendar_category'], name='event_calen_event_d_edde27_idx'),
        ),
        migrations.AddIndex(
            model_name='eventcalendar',
            index=models.Index(fields=['is_processed', 'affects_trading'], name='event_calen_is_proc_51e0b5_idx'),
        ),
        migrations.AddIndex(
            model_name='eventcalendar',
            index=models.Index(fields=['expected_impact'], name='event_calen_expecte_fb0aa3_idx'),
        ),
        migrations.AddIndex(
            model_name='eventcalendar',
            index=models.Index(fields=['trading_action_required'], name='event_calen_trading_5bfa79_idx'),
        ),
        migrations.AddIndex(
            model_name='eventcalendar',
            index=models.Index(fields=['event_occurred'], name='event_calen_event_o_924edf_idx'),
        ),
        migrations.AddIndex(
            model_name='eventcalendar',
            index=models.Index(fields=['company', 'event_date'], name='event_calen_company_ef40dc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventcalendar',
            unique_together={('company', 'event_date', 'event_type', 'source')},
        ),
        migrations.AddIndex(
            model_name='tradingalert',
            index=models.Index(fields=['symbol', 'alert_type'], name='trading_ale_symbol_d90b63_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingalert',
            index=models.Index(fields=['urgency', 'status'], name='trading_ale_urgency_bbd521_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingalert',
            index=models.Index(fields=['created_at'], name='trading_ale_created_c18290_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingalert',
            index=models.Index(fields=['is_processed'], name='trading_ale_is_proc_e21432_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingalert',
            index=models.Index(fields=['expires_at'], name='trading_ale_expires_3001a4_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingalert',
            index=models.Index(fields=['market_condition'], name='trading_ale_market__b15536_idx'),
        ),
        migrations.AddIndex(
            model_name='eventprocessinglog',
            index=models.Index(fields=['processing_type', 'log_level'], name='event_proce_process_776f00_idx'),
        ),
        migrations.AddIndex(
            model_name='eventprocessinglog',
            index=models.Index(fields=['created_at'], name='event_proce_created_27be90_idx'),
        ),
        migrations.AddIndex(
            model_name='eventprocessinglog',
            index=models.Index(fields=['source'], name='event_proce_source__006c29_idx'),
        ),
    ]
